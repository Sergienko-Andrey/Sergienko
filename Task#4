# Задание № 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

def salary_calculation():
    try:
        time = float(input('Выработка в часах: '))
        salary = float(input('Ставка в час в рублях: '))
        bonus = float(input('Премия в рублях: '))
        result = time * salary + bonus
        print(f'заработная плата сотрудника  {result}')
    except ValueError:
        return print('введите числовое значение')
salary_calculation()

# Задание № 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

list1 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
list2 = [
num for inx, num in enumerate(list1):
    if inx > 0 and list1[idx -1] < num]
print(list2)
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# Задание № 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
print([x for x in range(20, 240) if el % 20 == 0 or el % 21 == 0])

# Задание № 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. 
# Для выполнения задания обязательно использовать генератор.

list1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list2 = [x for x in list1 if list1.count(x) == 1]
print(list2)

# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# Задание № 5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
# В список должны войти четные числа от 100 до 1000 (включая границы). 
# Необходимо получить результат вычисления произведения всех элементов списка.

list = [ya for ya in range(100, 1000 + 1) if ya % 2 == 0]
print(list) # выводит список четных чисел от 100 до 1000
from functools import reduce
samm = reduce(lambda x, y: x * y, list,1)
print(samm) #выводит произведение четных чисел от 100 до 1000

#Подсказка: использовать функцию reduce().

# Задание № 6. Реализовать два небольших скрипта:

# а) итератор, генерирующий целые числа, начиная с указанного,
# Например, выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл
def gen1():
    a = int(input('Введите стартовое число: '))
    from itertools import cycle
    from itertools import count

    for i in count(a): #генерирует 10 чисел начиная с указанного
    if i >10:
        break
    print(i)

# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
print("*" * 20, "gen#2") 
list = [2,3,5,6,7,8,10,15,25,16,38]
max_it = 12
it_count = 0
    for el in cycle(list):
            print(el)
 it_count += 1
 if it_count >= max_it:
 break 
        
        
#Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
#Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

# Задание № 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.

def fact(num: int):
    temp_result =1
    if num <= 0:
        yield temp_result
        
   for x in range(1, num + 1):
        temp_result *= x
        yield temp_result
        
 N = 4
 
 for y in fact(N):
    print(Y)

# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
