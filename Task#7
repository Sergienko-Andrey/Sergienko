# Задача 1: 
# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: см. в методичке. Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно —
# первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, list):
        self.list = list

    def __str__(self):
        for row in self.list:
            for i in row:
                print(f"{i}", end=" ")
            print()
        return ''

    def __add__(self, other):
        for row in range(len(self.list)):
            for i in range(len(self.list[row])):
                self.list[row][i] = self.list[row][i] + other.list[row][i]
        return Matrix.__str__(self)


m1 = Matrix([[1, 2, 3], [1, 4, 8], [1, 5, 8], [1, 5, 77]])
m2 = Matrix([[0, 9, 9], [8, 5, 0], [4, 2, 4], [2, 4, 7]])
print(m1.__add__(m2))

# Задача 2: 
# Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3).
# Проверить работу этих методов на реальных данных. Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

from abc import ABC, abstractmethod


class WorkingForm(ABC):
    @abstractmethod
    def fabric_calculation(self):
        pass


class Coat(WorkingForm):
    def __init__(self, v):
        self.v = v
    @property
    def fabric_calculation(self):
        V = self.v/6.5 + 0.5
        return f'Ткани понадобится на пальто: {V}'


class Suite(WorkingForm):
    def __init__(self, h):
        self.h = h
    @property
    def fabric_calculation(self):
        H = 2*self.h + 0.3
        return f'Ткани понадобится на костюм: {H}'
    
    
class TotalFabric(WorkingForm):
    def __init__(self, v, h):
        self.V = v
        self.H = h

    @property
    def fabric_calculation(self):
        all = (self.V/6.5 + 0.5) + (2*self.H + 0.3)
        return f'Всего ткани понадобится: {all}'


coat = Coat(50)
suite = Suite(189)
total = TotalFabric(50, 189)
print(suite.fabric_calculation)
print(coat.fabric_calculation)
print(total.fabric_calculation)

# Задача 3: 
# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток. Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, num: int):
        self.number_of_cells = num
    def __add__(self, other):
        return f'Операция объединения двух клеток. Результат: {self.number_of_cells + other.number_of_cells}'
    def __sub__(self, other):
        if self.number_of_cells - other.number_of_cells != 0:
            a = self.number_of_cells - other.number_of_cells
            b = (a)
            return f'Вычитание клеток. Результат:{b}'
        else:
            return f'Клетка больше не существует.'
    def __mul__(self, other):
        return f'Умножение клеток. Результат: {self.number_of_cells * other.number_of_cells}'
    def __truediv__(self, other):
        return f'Деление клеток. Результат: {self.number_of_cells // other.number_of_cells}'
    def make_order(self, row):
        cel = ''
        for i in range(int(self.number_of_cells / inrow)):
            cel += '*' * inrow + '\n'
        cel += '*' * (self.number_of_cells % inrow) + '\n'
        return cel


cell1 = Cell(33)
cell2 = Cell(20)
print(cell1 + cell2)
print(cell1 - cell2)
print(cell1 * cell2)
print(cell1 / cell2)
print(cell1.make_order(10))
