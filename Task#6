# Задача 1: Создать класс TrafficLight (светофор) и определить у него
#один атрибут color (цвет) и метод running (запуск).
#Атрибут реализовать как приватный.
#В рамках метода реализовать переключение светофора в режимы:
#красный, желтый, зеленый.
#Продолжительность первого состояния (красный) составляет 7 секунд,
#второго (желтый) — 2 секунды, третьего (зеленый) —
#на ваше усмотрение.
#Переключение между режимами должно осуществляться только
#в указанном порядке (красный, желтый, зеленый).
#Проверить работу примера, создав экземпляр и вызвав описанный метод.
#Задачу можно усложнить, реализовав проверку порядка режимов,
#и при его нарушении выводить соответствующее сообщение и
#завершать скрипт.
import time
class TrafficLight:
    __color: str = ['Red', 'Yellow', 'Green']

    def running(self):
        if TrafficLight.__color[0] == 'Red' and TrafficLight.__color[1] == 'Yellow' and TrafficLight.__color[2] == 'Green':
            i = 0
            while i < 3:
                print(TrafficLight.__color[i])
                if i == 0:
                    time.sleep(7)
                elif i == 1:
                    time.sleep(2)
                elif i == 2:
                    time.sleep(5)
                i += 1
        else:
            print("Порядок переключения режимов светофора нарушен!")
trafficlight = TrafficLight()
trafficlight.running()

# Задача 2: Реализовать класс Road (дорога), в котором определить атрибуты:
#length (длина), width (ширина).
#Значения данных атрибутов должны передаваться при создании
#экземпляра класса. Атрибуты сделать защищенными.
#Определить метод расчета массы асфальта, необходимого
#для покрытия всего дорожного полотна.
#Использовать формулу: длина*ширина*масса асфальта
#для покрытия одного кв метра дороги асфальтом, толщиной
#в 1 см*число см толщины полотна. Проверить работу метода.
#Например: 20м*5000м*25кг*5см = 12500 т

#если все атрибуты передаются при создании экземпляра
class Road():
    _length: int
    _width: int

    def __init__(self, _length, _width, mass, thickness): # конструктор для приема переменных экземпляров
        self._length = _length
        self._width = _width
        self.thickness = thickness
        self.mass = mass

    def massa(self):
        return (self._length * self._width * self.mass * (self.thickness / 100)) * 0.1
        

m = Road(20, 5000, 25, 5) #экземпляр
print(f'Масса асфальта: {m.massa()} тонн')

#если при создании экземпляра передаются только длина и ширина
class Road():
    _length: int
    _width: int

    def __init__(self, _length, _width): # конструктор для приема переменных экземпляров
        self._length = _length
        self._width = _width

    def massa(self):
        mass = 25
        thickness = 5
        return (self._length * self._width * mass * (thickness/100))*0.1

m = Road(20, 5000) #экземпляр
print(f'Масса асфальта: {m.massa()} тонн')

#Задача 3: Реализовать базовый класс Worker (работник).
#определить атрибуты: name, surname, position (должность), income (доход);
#последний атрибут должен быть защищённым и ссылаться на словарь, содержащий элементы:
# оклад и премия, например, {"wage": wage, "bonus": bonus};
#создать класс Position (должность) на базе класса Worker;
#в классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода с учётом премии (get_total_income);
#проверить работу примера на реальных данных:
# создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров.
class Worker:
    def __init__(self, name, surname, position, wage, bonus):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {"wage": wage, "bonus": bonus}
class Position(Worker):
    def __init__(self, name, surname, position, wage, bonus):
        super().__init__(name, surname, position, wage, bonus)
    def get_full_name(self):
        return self.name + ' ' + self.surname
    def get_total_income(self):
        return self._income.get('wage') + self._income.get('bonus')
a = Position('Vika', 'Batyshkina', 'Cashier', 20000, 21000)
print(a.get_full_name())
print(a.position)
print(a.get_total_income())

# Задача 4: Реализуйте базовый класс Car.
# у класса должны быть следующие атрибуты: speed, color, name, is_police (булево).
# А также методы: go, stop, turn(direction),
# которые должны сообщать, что машина поехала, остановилась, повернула (куда);
# опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar;
# добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля;
# для классов TownCar и WorkCar переопределите метод show_speed.
# При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
# Создайте экземпляры классов, передайте значения атрибутов.
# Выполните доступ к атрибутам, выведите результат. Вызовите методы и покажите результат.
class Car:
    name: str
    color: str
    speed: int
    is_police: bool

    def __init__(self, name, color, speed, is_police):
        self.name = name
        self.color = color
        self.speed = speed
        self.is_police = is_police

    def go(self):
        return f'начал движение'

    def stop(self):
        return f'остановился'

    def tern_r(self):
        return f'повернул направо'

    def tern_l(self):
        return f'повернул налево'

    def show_speed(self):
        return self.speed

class TownCar(Car):
    def show_speed(self):
        if self.speed > 60:
            return f'превысил скорость'
        else:
            return self.speed

class SportCar(Car):
    def sport_car(self):
        return f'- sport car.'

class WorkCar(Car):
    def show_speed(self):
        if self.speed > 40:
            return f'превысил скорость'
        else:
            return self.speed

class PoliceCar(Car):
    def ispolice(self):
        if self.is_police is True:
            return "- police car."

mazda = TownCar("Mazda", "Red", 80, False)
kamaz = WorkCar("Kamaz", "Orange", 30, False)
dooge = SportCar("Dooge", "Yellow", 120, False)
laga = PoliceCar("Police Car", "Black", 100, True)

print(f'Марка городского авто: {mazda.name}.\nЦвет рабочей машины: {kamaz.color}. \nСкорость спортивного авто: {dooge.speed}км/ч.\nЛада - полицейский автомобиль: {laga.is_police}.')
print(f'Dooge {dooge.sport_car()}\nDooge {dooge.go()} и {dooge.tern_l()}.')
print(f'Mazda {mazda.show_speed()} и {mazda.stop()}.')
print(f'Kamaz {kamaz.tern_r()} и его скорость составляет сейчас {kamaz.show_speed()}км/ч.')
print(f'Lada {laga.ispolice()}')

# Задача 5: Реализовать класс Stationery (канцелярская принадлежность).
#определить в нём атрибут title (название) и метод draw (отрисовка). Метод выводит сообщение «Запуск отрисовки»;
#создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
#в каждом классе реализовать переопределение метода draw. Для каждого класса метод должен выводить уникальное сообщение;
#создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.
class Stationery:
    def __init__(self, title):
        self.title = title

    def draw(self):
        f'Запуск отрисовки.'

class Pen(Stationery):
    def draw(self):
        return f'Запуск 1 инструмента - {self.title}'
class Pencil(Stationery):
    def draw(self):
        return f'Запуск 2 инструмента - {self.title}'
class Handle(Stationery):
    def draw(self):
        return f'Запуск 3 инструмента - {self.title}'

pen = Pen("ручка")
pencil = Pencil("карандаш")
handle = Handle("маркер")
print(pen.draw())
print(pencil.draw())
print(handle.draw())
